/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

/***************************** Include Files *********************************/
#include "xparameters.h"
#include "xil_exception.h"
#include "xstreamer.h"
#include "xil_cache.h"
#include "xllfifo.h"
#include "xstatus.h"
//#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"

/***************** Macros (Inline Functions) Definitions *********************/
#define FIFO_DEV_ID	   	XPAR_AXI_FIFO_0_DEVICE_ID
#define WORD_SIZE 4			/* Size of words in bytes */
#define MAX_PACKET_LEN 64
#define NO_OF_PACKETS 64
#define MAX_DATA_BUFFER_SIZE NO_OF_PACKETS*MAX_PACKET_LEN

/************************** Function Prototypes ******************************/
struct Tuple
{
    double x_l;
    double x_l_other_end;
};
int setup_fifo(XLlFifo *InstancePtr, u16 DeviceId);
int RxReceive(XLlFifo *InstancePtr, u32 *encoded_bitstream);
// void run_length_decoder(u32 *encoded_bitstream, int32_t *quantized_matrix);
// void dequantizer(int32_t *quantized_matrix, int32_t *quantization_table, int32_t *dequantized_matrix);
// void compute_inverse_al (int l, float* al_values, int is_odd);
// struct Tuple compute_inverse_dct_coeff(int l, float* ym_values);
// void compute_one_dimensional_inverse_dct(float* yl_values, float* xm_values);
// void compute_inverse_dct(float* dct_coeffs, float* image);


int main()
{
    init_platform();
    int i;
	// Initialize AXI-Stream FIFO
	XLlFifo FifoInstance;
	int fifo_status = setup_fifo(&FifoInstance, FIFO_DEV_ID);
	u32* encoded_bitstream = (u32*) malloc(sizeof(MAX_PACKET_LEN*WORD_SIZE));
	int32_t* quantized_matrix = (int32_t*) malloc(sizeof(MAX_PACKET_LEN*int32_t));
	int32_t* quantization_table = (int32_t*) malloc(sizeof(MAX_PACKET_LEN*int32_t));
	int32_t* dequantized_matrix = (int32_t*) malloc(sizeof(MAX_PACKET_LEN*int32_t));
	for (i=0; i<MAX_PACKET_LEN; i++)
	{
		encoded_bitstream[i] = 0;
	}
	int rx_status = RxReceive(&FifoInstance, encoded_bitstream);
	for (i=0; i<MAX_PACKET_LEN; i++)
	{
		xil_printf("RX Status %d: %d\n", i, encoded_bitstream[i]);
	}
    print("Hello World\n\r");

    free(encoded_bitstream);
    cleanup_platform();
    return 0;
}

int setup_fifo(XLlFifo *InstancePtr, u16 DeviceId)
{
	int Status;
	Status = XST_SUCCESS;
	
	XLlFifo_Config *Config = XLlFfio_LookupConfig(DeviceId);
	if (!Config) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}

	Status = XLlFifo_CfgInitialize(InstancePtr, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed\n\r");
		return Status;
	}

	/* Check for the Reset value */
	Status = XLlFifo_Status(InstancePtr);
	XLlFifo_IntClear(InstancePtr,0xffffffff);
	Status = XLlFifo_Status(InstancePtr);
	if(Status != 0x0) {
		xil_printf("\n ERROR : Reset value of ISR0 : 0x%x\t"
			    "Expected : 0x0\n\r",
			    XLlFifo_Status(InstancePtr));
		return XST_FAILURE;
	}

	return Status;
}

/*
 Function is blocking: Will only work when it has received a packet on the FIFO
 Once a packet is found, it will read a single packet (referenced by TLAST)

 */
int RxReceive(XLlFifo *InstancePtr, u32 *encoded_bitstream)
{

	int i;
	int Status;
	u32 RxWord;
	static u32 ReceiveLength;

	xil_printf(" Checking for data ....\n\r");
	while(XLlFifo_iRxOccupancy(InstancePtr) == 0);
	
	xil_printf(" Receiving data ....\n\r");
	ReceiveLength = (XLlFifo_iRxGetLen(InstancePtr))/WORD_SIZE;
	xil_printf("FIFO Length: %d\n", ReceiveLength);
	for (i=0; i < ReceiveLength; i++) {
		RxWord = XLlFifo_RxGetWord(InstancePtr);
		encoded_bitstream[i] = RxWord;
	}

	Status = XLlFifo_IsRxDone(InstancePtr);
	if(Status != TRUE){
		xil_printf("Failing in receive complete ... \r\n");
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

//void compute_inverse_al (int l, float* al_values, int is_odd)
//{
//    int m, n;
//    for (m = 0; m < BLOCK_SIZE/2; m++)
//    {
//        n = (is_odd == 1) ? 2*m + 1: 2*m;
//        al_values[m] = 0.5 * cos((2*l + 1)*n*PI/(2*BLOCK_SIZE));
//        if (n == 0)
//        {
//            al_values[m] = 1/sqrt(2) * al_values[m];
//        }
//    }
//}
//
//struct Tuple compute_inverse_dct_coeff(int l, float* ym_values)
//{
//    // printf("l: %d\n", l);
//    // 1. Calculate am values (cosine values)
//    float* al_values_even = (float*) malloc( BLOCK_SIZE / 2 * sizeof(float));
//    compute_inverse_al(l, al_values_even, 0);
//    // for (int i = 0; i < BLOCK_SIZE/2; i++)
//    // {
//    //     printf("Even AL Value %d: %.2f\n", i, al_values_even[i]);
//    // }
//    float* al_values_odd = (float*) malloc( BLOCK_SIZE / 2 * sizeof(float));
//    compute_inverse_al(l, al_values_odd, 1);
//    // for (int i = 0; i < BLOCK_SIZE/2; i++)
//    // {
//    //     printf("Odd AL Value %d: %.2f\n", i, al_values_odd[i]);
//    // }
//    // 2. Compute u and v
//    double u = 0;
//    double v = 0;
//    int m;
//    for (m = 0; m < BLOCK_SIZE / 2; m++)
//    {
//        u += al_values_even[m] * ym_values[2*m];
//        v += al_values_odd[m] * ym_values[2*m + 1];
//    }
//    // 3. Compute coefficients
//    int correction_value = 1;
//    double x_l = correction_value * (u + v);
//    double x_l_other_end = correction_value * (u - v);
//    // printf("x_l: %.2f\n", x_l);
//    // printf("x_l_other: %.2f\n", x_l_other_end);
//    struct Tuple pixels = {x_l, x_l_other_end};
//    return pixels;
//}
//
//void compute_one_dimensional_inverse_dct(float* yl_values, float* xm_values)
//{
//    int l;
//    struct Tuple pixels;
//    for (l = 0; l < BLOCK_SIZE / 2; l++)
//    {
//        pixels = compute_inverse_dct_coeff(l, yl_values);
//        xm_values[l] = pixels.x_l;
//        xm_values[BLOCK_SIZE-1-l] = pixels.x_l_other_end;
//    }
//}
//
//void compute_inverse_dct(float* dct_coeffs, float* image)
//{
//    // Input: matrix with BLOCK_SIZE x BLOCK_SIZE coefficients
//    // Output: matrix with BLOCK_SIZE x BLOCK_SIZE pixels
//    // i represents the rows, j represents the columns
//    int i;
//    int j;
//    // 1. Perform 1-D IDCT on the rows of the coefficients
//    float* xm_values = (float*) malloc(BLOCK_SIZE * sizeof(float));
//    float* yl_values = (float*) malloc(BLOCK_SIZE * sizeof(float));
//    for (i = 0; i < BLOCK_SIZE; i++)
//    {
//        for (j = 0; j < BLOCK_SIZE; j++)
//        {
//            yl_values[j] = dct_coeffs[8*i + j];
//        }
//        compute_one_dimensional_inverse_dct(yl_values, xm_values);
//        for (j = 0; j < BLOCK_SIZE; j++)
//        {
//            image[8*i + j] = xm_values[j];
//        }
//    }
//    // 2. Transpose the coefficients
//    transpose_matrix(image);
//    // 3. Perform the 1-D DCT again
//    for (i = 0; i < BLOCK_SIZE; i++)
//    {
//        for (j = 0; j < BLOCK_SIZE; j++)
//        {
//            yl_values[j] = image[8*i + j];
//        }
//        compute_one_dimensional_inverse_dct(yl_values, xm_values);
//        for (j = 0; j < BLOCK_SIZE; j++)
//        {
//            image[8*i + j] = xm_values[j];
//        }
//    }
//    free(xm_values);
//    free(yl_values);
//}
