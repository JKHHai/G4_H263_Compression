/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

/***************************** Include Files *********************************/
#include "xparameters.h"
#include "xil_exception.h"
#include "xstreamer.h"
#include "xil_cache.h"
#include "xllfifo.h"
#include "xstatus.h"
//#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "platform.h"
#include "xil_printf.h"

/***************** Macros (Inline Functions) Definitions *********************/
#define PI 3.1415926
#define BLOCK_SIZE 8
#define SCALE 7
#define VALUE_WIDTH 10
#define NON_VALUE_WIDTH 32-VALUE_WIDTH
#define DECODER_VALUE(X) (((X) << NON_VALUE_WIDTH) >> NON_VALUE_WIDTH)
#define DECODER_VALUE_MSB(X) (DECODER_VALUE((X))>>(VALUE_WIDTH-1))
#define DECODER_VALUE_PADDING(X) ((DECODER_VALUE_MSB((X)) == 1) ? (0xFFFFFFFF << VALUE_WIDTH) : 0)

#define FIFO_DEV_ID	   	XPAR_AXI_FIFO_0_DEVICE_ID
#define WORD_SIZE 4			/* Size of words in bytes */
#define MAX_PACKET_LEN BLOCK_SIZE*BLOCK_SIZE
#define NO_OF_PACKETS 64
#define MAX_DATA_BUFFER_SIZE NO_OF_PACKETS*MAX_PACKET_LEN

/************************** Function Prototypes ******************************/
struct Tuple
{
    double x_l;
    double x_l_other_end;
};
int setup_fifo(XLlFifo *InstancePtr, u16 DeviceId);
void setup_quantization_table(int32_t* quantization_table);
int RxReceive(XLlFifo *InstancePtr, u32 *encoded_bitstream);
void run_length_decoder(u32 *encoded_bitstream, int32_t *quantized_matrix);
void dequantizer(int32_t *quantized_matrix, int32_t *quantization_table, int32_t *dequantized_matrix);
void compute_inverse_al (int l, float* al_values, int is_odd);
struct Tuple compute_inverse_dct_coeff(int l, float* ym_values);
void compute_one_dimensional_inverse_dct(float* yl_values, float* xm_values);
void compute_inverse_dct(int32_t* dct_coeffs, float* image);


int main()
{
    init_platform();
    int i;
	// Setup
	XLlFifo FifoInstance;
	int fifo_status = setup_fifo(&FifoInstance, FIFO_DEV_ID);
	int32_t* quantization_table = (int32_t*) malloc(MAX_PACKET_LEN*sizeof(int32_t));
	setup_quantization_table(quantization_table);
	u32* encoded_bitstream = (u32*) malloc(MAX_PACKET_LEN*sizeof(u32));
	int32_t* quantized_matrix = (int32_t*) malloc(MAX_PACKET_LEN*sizeof(int32_t));
	int32_t* dequantized_matrix = (int32_t*) malloc(MAX_PACKET_LEN*sizeof(int32_t));
	float* image = (float*) malloc(MAX_PACKET_LEN*sizeof(float));
	for (i=0; i<MAX_PACKET_LEN; i++)
	{
		encoded_bitstream[i] = 0;
		quantized_matrix[i] = 0;
		dequantized_matrix[i] = 0;
	}
	
	int rx_status = RxReceive(&FifoInstance, encoded_bitstream);
	run_length_decoder(encoded_bitstream, quantized_matrix);
	dequantizer(quantized_matrix, quantization_table, dequantized_matrix);
	compute_inverse_dct(dequantized_matrix, image);
	for (i=0; i<MAX_PACKET_LEN; i++)
	{
		xil_printf("Image Value %d: %d\n", i, image[i]);
	}

	// Cleanup
    free(encoded_bitstream);
	free(quantized_matrix);
	free(dequantized_matrix);
	free(image);
    cleanup_platform();
    return 0;
}

int setup_fifo(XLlFifo *InstancePtr, u16 DeviceId)
{
	int Status;
	Status = XST_SUCCESS;
	
	XLlFifo_Config *Config = XLlFfio_LookupConfig(DeviceId);
	if (!Config) {
		xil_printf("No config found for %d\r\n", DeviceId);
		return XST_FAILURE;
	}

	Status = XLlFifo_CfgInitialize(InstancePtr, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		xil_printf("Initialization failed\n\r");
		return Status;
	}

	/* Check for the Reset value */
	Status = XLlFifo_Status(InstancePtr);
	XLlFifo_IntClear(InstancePtr,0xffffffff);
	Status = XLlFifo_Status(InstancePtr);
	if(Status != 0x0) {
		xil_printf("\n ERROR : Reset value of ISR0 : 0x%x\t"
			    "Expected : 0x0\n\r",
			    XLlFifo_Status(InstancePtr));
		return XST_FAILURE;
	}

	return Status;
}

void setup_quantization_table(int32_t* quantization_table)
{
	quantization_table[0]  = 16;
	quantization_table[1]  = 11;
	quantization_table[2]  = 10;
	quantization_table[3]  = 16;
	quantization_table[4]  = 24;
	quantization_table[5]  = 40;
	quantization_table[6]  = 51;
	quantization_table[7]  = 61;
	quantization_table[8]  = 12;
	quantization_table[9]  = 12;
	quantization_table[10] = 14;
	quantization_table[11] = 19;
	quantization_table[12] = 26;
	quantization_table[13] = 58;
	quantization_table[14] = 60;
	quantization_table[15] = 55;
	quantization_table[16] = 14;
	quantization_table[17] = 13;
	quantization_table[18] = 16;
	quantization_table[19] = 24;
	quantization_table[20] = 40;
	quantization_table[21] = 57;
	quantization_table[22] = 69;
	quantization_table[23] = 56;
	quantization_table[24] = 14;
	quantization_table[25] = 17;
	quantization_table[26] = 22;
	quantization_table[27] = 29;
	quantization_table[28] = 51;
	quantization_table[29] = 87;
	quantization_table[30] = 80;
	quantization_table[31] = 62;
	quantization_table[32] = 18;
	quantization_table[33] = 22;
	quantization_table[34] = 37;
	quantization_table[35] = 56;
	quantization_table[36] = 68;
	quantization_table[37] = 109;
	quantization_table[38] = 103;
	quantization_table[39] = 77;
	quantization_table[40] = 24;
	quantization_table[41] = 35;
	quantization_table[42] = 55;
	quantization_table[43] = 64;
	quantization_table[44] = 81;
	quantization_table[45] = 104;
	quantization_table[46] = 113;
	quantization_table[47] = 92;
	quantization_table[48] = 49;
	quantization_table[49] = 64;
	quantization_table[50] = 78;
	quantization_table[51] = 87;
	quantization_table[52] = 103;
	quantization_table[53] = 121;
	quantization_table[54] = 120;
	quantization_table[55] = 101;
	quantization_table[56] = 72;
	quantization_table[57] = 92;
	quantization_table[58] = 95;
	quantization_table[59] = 98;
	quantization_table[60] = 112;
	quantization_table[61] = 100;
	quantization_table[62] = 103;
	quantization_table[63] = 99;
}

/*
 Function is blocking: Will only work when it has received a packet on the FIFO
 Once a packet is found, it will read a single packet (referenced by TLAST)

 */
int RxReceive(XLlFifo *InstancePtr, u32 *encoded_bitstream)
{

	int i;
	int Status;
	u32 RxWord;
	static u32 ReceiveLength;

	xil_printf(" Checking for data ....\n\r");
	while(XLlFifo_iRxOccupancy(InstancePtr) == 0);
	
	xil_printf(" Receiving data ....\n\r");
	ReceiveLength = (XLlFifo_iRxGetLen(InstancePtr))/WORD_SIZE;
	xil_printf("FIFO Length: %d\n", ReceiveLength);
	for (i=0; i < ReceiveLength; i++) {
		RxWord = XLlFifo_RxGetWord(InstancePtr);
		encoded_bitstream[i] = RxWord;
	}

	Status = XLlFifo_IsRxDone(InstancePtr);
	if(Status != TRUE){
		xil_printf("Failing in receive complete ... \r\n");
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

void run_length_decoder(u32* encoded_bitstream, int32_t* quantized_matrix)
{
    int i;
    int j;
    int curr_pos_bitstream = 0;
	int value;
    int frequency;
    for (i = 0; i < BLOCK_SIZE * BLOCK_SIZE; i += 1)
    {
		value = DECODER_VALUE(encoded_bitstream[i]) | DECODER_VALUE_PADDING(encoded_bitstream[i]);
		frequency = encoded_bitstream[i] >> VALUE_WIDTH;
        for (j = 0; j < frequency; j++)
        {
            quantized_matrix[curr_pos_bitstream + j] = value;
        }
        curr_pos_bitstream += frequency;
		if (curr_pos_bitstream == BLOCK_SIZE*BLOCK_SIZE)
		{
			break;
		}
    }
}

void dequantizer(int32_t *quantized_matrix, int32_t *quantization_table, int32_t *dequantized_matrix)
{
	int i;
	for (i=0; i<BLOCK_SIZE*BLOCK_SIZE; i++)
	{
		dequantized_matrix[i] = quantized_matrix[i] * quantization_table[i];
	}
}

// Input: 2x2 matrix
void transpose_stage_one(float** matrix)
{  
    /*
        Visualize pipeline:
        P1: I1 - - - -  |    | - reg1 - O1
        P2: I2 - reg2 - |    | - - - -  O2
    
        ctrl:
        0 - Pipelines don't intersect (P1 directs to O1)
        1 - Pipelines intersect - (P1 directs to O2, vice versa)
        Ctrl switches every cycle
    */
    int cycle;
    int ctrl = 0;
    float reg1;
    float reg2;
    for (cycle = 0; cycle < 3; cycle++)
    {
        if (cycle == 0)
        {
            reg1 = matrix[0][0];
            reg2 = matrix[1][0];
            ctrl = 1;
        }
        else if (cycle == 1)
        {
            matrix[0][0] = reg1;
            matrix[1][0] = matrix[0][1];
            reg1 = reg2;
            reg2 = matrix[1][1];
            ctrl = 0;
        }
        else if (cycle == 2)
        {
            // In reality this can happen in cycle 0
            matrix[0][1] = reg1;
            matrix[1][1] = reg2;
            ctrl = 1;
        }
    }
}

// Input: 2x4 matrix
void transpose_stage_two(float** matrix)
{
    /*
        Visualize pipeline:
        P1: I1 - - - - - - - - - |    | - reg11 - reg12 - O1
        P2: I2 - reg21 - reg22 - |    | - - - - - - - - - O2
    
        ctrl:
        0 - Pipelines don't intersect (P1 directs to O1)
        1 - Pipelines intersect - (P1 directs to O2, vice versa)
        ctrl switches every 2 cycles
    */
    float reg11;
    float reg12;
    float reg21;
    float reg22;
    int cycle;
    int input_col = 0;
    int output_col = 0;
    int ctrl = 0;
    for (cycle = 0; cycle < 6; cycle++)
    {
        if (cycle == 0 || cycle == 1)
        {
            reg12 = reg11;
            reg22 = reg21;
            // Read from Column 1
            reg11 = matrix[0][input_col];
            reg21 = matrix[1][input_col];
            input_col += 1;
            if (cycle == 1)
            {
            // On cycle 2 ctrl will be 1
            ctrl = 1;
            }
        }
        else if (cycle == 2 || cycle == 3)
        {
            matrix[0][output_col] = reg12;
            matrix[1][output_col] = matrix[0][input_col];
            reg12 = reg11;
            reg11 = reg22;
            reg22 = reg21;            
            reg21 = matrix[1][input_col];
            input_col += 1;
            output_col += 1;
            if (cycle == 3)
            {
            // On cycle 0 ctrl will be 0
            ctrl = 0;
            }            
        }
        else if (cycle == 4 || cycle == 5)
        {
            // Technically will be cycles 0 and 1, just used to clear the pipelines
            matrix[0][output_col] = reg12;
            matrix[1][output_col] = reg22;
            reg12 = reg11;
            reg22 = reg21;
            output_col += 1;
        }
    }
}

// Input: 2x8 matrix
void transpose_stage_three(float** matrix)
{
    /*
        Visualize pipeline:
        P1: I1 - - - - - - - - - - - - - - - - |    | - reg11 - reg12 - reg13 - reg14 - O1
        P2: I2 - reg21 - reg22 - reg23 - reg24 |    | - - - - - - - - - - - - - - - - - O2
    
        ctrl:
        0 - Pipelines don't intersect (P1 directs to O1)
        1 - Pipelines intersect - (P1 directs to O2, vice versa)
        ctrl switches every 4 cycles
    */
    float reg11;
    float reg12;
    float reg13;
    float reg14;
    float reg21;
    float reg22;
    float reg23;
    float reg24;
    int cycle;
    int input_col = 0;
    int output_col = 0;
    int ctrl = 0;
    for (cycle = 0; cycle < 12; cycle++)
    {
        if (cycle >= 0 && cycle < 4)
        {
            reg14 = reg13;
            reg13 = reg12;
            reg12 = reg11;
            reg24 = reg23;
            reg23 = reg22;
            reg22 = reg21;     
            // Read from Column 1
            reg11 = matrix[0][input_col];
            reg21 = matrix[1][input_col];
            input_col += 1;
            if (cycle == 3)
            {
            // On cycle 2 ctrl will be 1
            ctrl = 1;
            }
        }
        else if (cycle >= 4 && cycle < 8)
        {
            matrix[0][output_col] = reg14;
            matrix[1][output_col] = matrix[0][input_col];
            reg14 = reg13;
            reg13 = reg12;
            reg12 = reg11;
            reg11 = reg24;
            reg24 = reg23;
            reg23 = reg22;
            reg22 = reg21;          
            reg21 = matrix[1][input_col];
            input_col += 1;
            output_col += 1;
            if (cycle == 7)
            {
            // On cycle 0 ctrl will be 0
            ctrl = 0;
            }            
        }
        else if (cycle >= 8 || cycle < 12)
        {
            // Technically will be cycles 0-3, just used to clear the pipelines
            matrix[0][output_col] = reg14;
            matrix[1][output_col] = reg24;
            reg14 = reg13;
            reg13 = reg12;
            reg12 = reg11;
            reg24 = reg23;
            reg23 = reg22;
            reg22 = reg21;
            output_col += 1;
        }
    }
}

// Input: 8x8 matrix
void transpose_matrix(float* matrix)
{
    // Assume matrix is arranged in form of 64 entries, in the form of:
    /*
        [ 1, 2, 3, 4, 5, 6, 7, 8
          9, 10, 11, 12, 13, 14, 15, 16
          .....
    */
    // i represents row, j represents column
    int i;
    int j;
    int k;
    // 1. Stage 1: Compute all 2x2 transposes
    float* two_by_two_matrix[2];
    float two_by_two_temprow[2];
    for (i = 0; i < 2; i++)
    {
        two_by_two_matrix[i] = (float*) malloc (2 * sizeof(float));
    }
    for (j = 0; j < 8; j=j+2)
    {
        for (i = 0; i < 8; i=i+2)
        {   
            two_by_two_matrix[0][0] = matrix[8*i + j];
            two_by_two_matrix[0][1] = matrix[8*i + j+1];
            two_by_two_matrix[1][0] = matrix[8*(i+1) + j];
            two_by_two_matrix[1][1] = matrix[8*(i+1) + j+1];
            transpose_stage_one(two_by_two_matrix);
            matrix[8*i + j] = two_by_two_matrix[0][0];
            matrix[8*i + j+1] = two_by_two_matrix[0][1];
            matrix[8*(i+1) + j] = two_by_two_matrix[1][0];
            matrix[8*(i+1) + j+1] = two_by_two_matrix[1][1];
        }
        // After 2 columns have been transposed, perform inter-stage movement
        for (i = 0; i < 8; i=i+2)
        {
            switch(i)
            {
                case 0:
                case 4:
                    // Row 1 of these matrices swap with Row 0 of proceeding matrices
                    two_by_two_temprow[0] = matrix[8*(i+1) + j];
                    two_by_two_temprow[1] = matrix[8*(i+1) + j+1];
                    matrix[8*(i+1) + j] = matrix[8*(i+2) + j];
                    matrix[8*(i+1) + j+1] = matrix[8*(i+2) + j+1];
                    matrix[8*(i+2) + j] = two_by_two_temprow[0];
                    matrix[8*(i+2) + j+1] = two_by_two_temprow[1];
                    break;
            }
        }
    }
    for (i = 0; i < 2; i++)
    {
        free(two_by_two_matrix[i]);
    }
    // 2. Stage 2: Compute all 2x4 transposes
    float* two_by_four_matrix[2];
    float two_by_four_tempcol[8];
    for (i = 0; i < 2; i++)
    {
        two_by_four_matrix[i] = (float*) malloc (4 * sizeof(float));
    }
    for (j = 0; j < 8; j=j+4)
    {
        for (i = 0; i < 8; i=i+2)
        {
            two_by_four_matrix[0][0] = matrix[8*i + j];
            two_by_four_matrix[0][1] = matrix[8*i + j+1];
            two_by_four_matrix[0][2] = matrix[8*i + j+2];
            two_by_four_matrix[0][3] = matrix[8*i + j+3];
            two_by_four_matrix[1][0] = matrix[8*(i+1) + j];
            two_by_four_matrix[1][1] = matrix[8*(i+1) + j+1];
            two_by_four_matrix[1][2] = matrix[8*(i+1) + j+2];
            two_by_four_matrix[1][3] = matrix[8*(i+1) + j+3];
            transpose_stage_two(two_by_four_matrix);
            matrix[8*i + j] = two_by_four_matrix[0][0];
            matrix[8*i + j+1] = two_by_four_matrix[0][1];
            matrix[8*i + j+2] = two_by_four_matrix[0][2];
            matrix[8*i + j+3] = two_by_four_matrix[0][3];
            matrix[8*(i+1) + j] = two_by_four_matrix[1][0];
            matrix[8*(i+1) + j+1] = two_by_four_matrix[1][1];
            matrix[8*(i+1) + j+2] = two_by_four_matrix[1][2];
            matrix[8*(i+1) + j+3] = two_by_four_matrix[1][3];
        }
    }
    // Perform inter-stage movement
    for (j = 0; j < 8; j++)
    {
        for (i = 0; i < 8; i++)
        {
            two_by_four_tempcol[i] = matrix[8*i + j];
        }
        matrix[8*1 + j] = two_by_four_tempcol[4];
        matrix[8*3 + j] = two_by_four_tempcol[6];
        matrix[8*4 + j] = two_by_four_tempcol[1];
        matrix[8*6 + j] = two_by_four_tempcol[3];
    }
    for (i = 0; i < 2; i++)
    {
        free(two_by_four_matrix[i]);
    }    
    // 3. Stage 3: Compute all 2x8 transposes
    float* two_by_eight_matrix[2];
    float two_by_eight_tempcol[8];
    for (i = 0; i < 2; i++)
    {
        two_by_eight_matrix[i] = (float*) malloc (8 * sizeof(float));
    }
    for (i = 0; i < 8; i=i+2)
    {
        two_by_eight_matrix[0][0] = matrix[8*i];
        two_by_eight_matrix[0][1] = matrix[8*i + 1];
        two_by_eight_matrix[0][2] = matrix[8*i + 2];
        two_by_eight_matrix[0][3] = matrix[8*i + 3];
        two_by_eight_matrix[0][4] = matrix[8*i + 4];
        two_by_eight_matrix[0][5] = matrix[8*i + 5];
        two_by_eight_matrix[0][6] = matrix[8*i + 6];
        two_by_eight_matrix[0][7] = matrix[8*i + 7];
        two_by_eight_matrix[1][0] = matrix[8*(i+1)];
        two_by_eight_matrix[1][1] = matrix[8*(i+1) + 1];
        two_by_eight_matrix[1][2] = matrix[8*(i+1) + 2];
        two_by_eight_matrix[1][3] = matrix[8*(i+1) + 3];
        two_by_eight_matrix[1][4] = matrix[8*(i+1) + 4];
        two_by_eight_matrix[1][5] = matrix[8*(i+1) + 5];
        two_by_eight_matrix[1][6] = matrix[8*(i+1) + 6];
        two_by_eight_matrix[1][7] = matrix[8*(i+1) + 7];
        transpose_stage_three(two_by_eight_matrix);
        matrix[8*i ] = two_by_eight_matrix[0][0];
        matrix[8*i + 1] = two_by_eight_matrix[0][1];
        matrix[8*i + 2] = two_by_eight_matrix[0][2];
        matrix[8*i + 3] = two_by_eight_matrix[0][3];
        matrix[8*i + 4] = two_by_eight_matrix[0][4];
        matrix[8*i + 5] = two_by_eight_matrix[0][5];
        matrix[8*i + 6] = two_by_eight_matrix[0][6];
        matrix[8*i + 7] = two_by_eight_matrix[0][7];
        matrix[8*(i+1) ] = two_by_eight_matrix[1][0];
        matrix[8*(i+1) + 1] = two_by_eight_matrix[1][1];
        matrix[8*(i+1) + 2] = two_by_eight_matrix[1][2];
        matrix[8*(i+1) + 3] = two_by_eight_matrix[1][3];
        matrix[8*(i+1) + 4] = two_by_eight_matrix[1][4];
        matrix[8*(i+1) + 5] = two_by_eight_matrix[1][5];
        matrix[8*(i+1) + 6] = two_by_eight_matrix[1][6];
        matrix[8*(i+1) + 7] = two_by_eight_matrix[1][7];
    } 
    // After the columns have been transposed, perform inter-stage movement
    for (j = 0; j < 8; j++)
    {
        for (i = 0; i < 8; i++)
        {
            two_by_eight_tempcol[i] = matrix[8*i + j];
        }
        matrix[8*1 + j] = two_by_eight_tempcol[2];
        matrix[8*2 + j] = two_by_eight_tempcol[4];
        matrix[8*3 + j] = two_by_eight_tempcol[6];
        matrix[8*4 + j] = two_by_eight_tempcol[1];
        matrix[8*5 + j] = two_by_eight_tempcol[3];
        matrix[8*6 + j] = two_by_eight_tempcol[5];
    }
    for (i = 0; i < 2; i++)
    {
        free(two_by_eight_matrix[i]);
    }
}

void compute_inverse_al (int l, float* al_values, int is_odd)
{
   int m, n;
   for (m = 0; m < BLOCK_SIZE/2; m++)
   {
       n = (is_odd == 1) ? 2*m + 1: 2*m;
       al_values[m] = 0.5 * cos((2*l + 1)*n*PI/(2*BLOCK_SIZE));
       if (n == 0)
       {
           al_values[m] = 1/sqrt(2) * al_values[m];
       }
   }
}

struct Tuple compute_inverse_dct_coeff(int l, float* ym_values)
{
   // printf("l: %d\n", l);
   // 1. Calculate am values (cosine values)
   float* al_values_even = (float*) malloc( BLOCK_SIZE / 2 * sizeof(float));
   compute_inverse_al(l, al_values_even, 0);
   // for (int i = 0; i < BLOCK_SIZE/2; i++)
   // {
   //     printf("Even AL Value %d: %.2f\n", i, al_values_even[i]);
   // }
   float* al_values_odd = (float*) malloc( BLOCK_SIZE / 2 * sizeof(float));
   compute_inverse_al(l, al_values_odd, 1);
   // for (int i = 0; i < BLOCK_SIZE/2; i++)
   // {
   //     printf("Odd AL Value %d: %.2f\n", i, al_values_odd[i]);
   // }
   // 2. Compute u and v
   double u = 0;
   double v = 0;
   int m;
   for (m = 0; m < BLOCK_SIZE / 2; m++)
   {
       u += al_values_even[m] * ym_values[2*m];
       v += al_values_odd[m] * ym_values[2*m + 1];
   }
   // 3. Compute coefficients
   int correction_value = 1;
   double x_l = correction_value * (u + v);
   double x_l_other_end = correction_value * (u - v);
   // printf("x_l: %.2f\n", x_l);
   // printf("x_l_other: %.2f\n", x_l_other_end);
   struct Tuple pixels = {x_l, x_l_other_end};
   return pixels;
}

void compute_one_dimensional_inverse_dct(float* yl_values, float* xm_values)
{
   int l;
   struct Tuple pixels;
   for (l = 0; l < BLOCK_SIZE / 2; l++)
   {
       pixels = compute_inverse_dct_coeff(l, yl_values);
       xm_values[l] = pixels.x_l;
       xm_values[BLOCK_SIZE-1-l] = pixels.x_l_other_end;
   }
}

void compute_inverse_dct(int32_t* dct_coeffs, float* image)
{
   // Input: matrix with BLOCK_SIZE x BLOCK_SIZE coefficients
   // Output: matrix with BLOCK_SIZE x BLOCK_SIZE pixels
   // i represents the rows, j represents the columns
   int i;
   int j;
   // 1. Perform 1-D IDCT on the rows of the coefficients
   float* xm_values = (float*) malloc(BLOCK_SIZE * sizeof(float));
   float* yl_values = (float*) malloc(BLOCK_SIZE * sizeof(float));
   for (i = 0; i < BLOCK_SIZE; i++)
   {
       for (j = 0; j < BLOCK_SIZE; j++)
       {
           yl_values[j] = dct_coeffs[8*i + j];
       }
       compute_one_dimensional_inverse_dct(yl_values, xm_values);
       for (j = 0; j < BLOCK_SIZE; j++)
       {
           image[8*i + j] = xm_values[j];
       }
   }
   // 2. Transpose the coefficients
   transpose_matrix(image);
   // 3. Perform the 1-D DCT again
   for (i = 0; i < BLOCK_SIZE; i++)
   {
       for (j = 0; j < BLOCK_SIZE; j++)
       {
           yl_values[j] = image[8*i + j];
       }
       compute_one_dimensional_inverse_dct(yl_values, xm_values);
       for (j = 0; j < BLOCK_SIZE; j++)
       {
           image[8*i + j] = xm_values[j];
       }
   }
   free(xm_values);
   free(yl_values);
}
